@page "/"
@inject AppState appState
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavigationManagerHome

@inject IJSRuntime JS

@inject IdentityRedirectManager RedirectManager

<PageTitle>Home</PageTitle>

<MudContainer Class="px-8 pt-2 mx-4 my-4" MaxWidth="MaxWidth.False">
    <MudGrid>
        <MudItem xs="12" sm="6">
            <MudPaper Elevation="2" Class="pa-4  rounded-xl" Style="height: 100%">
                <h1>Hello, world!</h1>
                Welcome to your new app.
                @foreach (var linha in arrayDeLinhas)
                {
                    @linha <br />
                }
                <br />
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6">
            <MudGrid>
                <MudItem xs="12">
                    <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;"></MudPaper>
                </MudItem>
                <MudItem xs="12">
                    <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;"></MudPaper>
                </MudItem>
            </MudGrid>
        </MudItem>

        <MudItem xs="12" sm="6" md="4">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;"></MudPaper>
        </MudItem>
        <MudItem xs="12" sm="6" md="4">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;"></MudPaper>
        </MudItem>
        <MudItem xs="12" sm="12" md="4">
            <MudPaper Elevation="2" Class="pa-4" Style="height: 200px;"></MudPaper>
        </MudItem>
    </MudGrid>
</MudContainer>



@code
{
    string[] arrayDeLinhas;

    protected override async Task OnInitializedAsync()
    {
        arrayDeLinhas = appState.MyMessage.Split('\n');

        // var cookieContent = await localStorage.GetItemAsync<string>("cookietheme");

        // if (cookieContent == null)
        // {
        //     await JS.InvokeVoidAsync("toggleTheme");
        // }
        // else
        // {
        //     await JS.InvokeVoidAsync("toggleTheme", cookieContent);
        // }

    }

    private async Task HandleSubmit()
    {
        // await localStorage.SetItemAsync("cookietheme", "dark");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // var cookieContent = await localStorage.GetItemAsync<string>("cookietheme");

        // if (cookieContent == null)
        // {
        //     Console.WriteLine("Cookie is Theme");
        // }
        // else
        // {
        //     Console.WriteLine("We have a cookie with contents: " + cookieContent);
        // }

        // if (cookieContent == null)
        // {
        //     await JS.InvokeVoidAsync("toggleTheme");
        // }
        // else
        // {
        //     await JS.InvokeVoidAsync("toggleTheme", cookieContent);
        // }
    }
} 