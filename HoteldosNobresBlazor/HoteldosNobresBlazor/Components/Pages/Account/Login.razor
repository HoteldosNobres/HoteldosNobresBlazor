@page "/Account/Login"
@attribute [AllowAnonymous]

@using System.ComponentModel.DataAnnotations
@using HoteldosNobresBlazor.Classes
@using HoteldosNobresBlazor.Client.API
@using HoteldosNobresBlazor.Funcoes
@using HoteldosNobresBlazor.Modelo
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject APICloudbeds cloudbedsAPI

<PageTitle>Entre no sistema</PageTitle>

<MudGrid Justify="Justify.SpaceAround" Class="mt-8">
    <MudItem xs="12" sm="12" md="4">
        <MudPaper Class="d-flex flex-column align-center justify-center mud-width-full py-8 rounded-xl" Outlined="true">
            <section>
                <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                    <DataAnnotationsValidator />
                    <h2>Sistema Hotel dos Nobres</h2>
                    <hr />
                    <ValidationSummary class="text-danger" role="alert" />
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                        <label for="name" class="form-label">E-mail ou Número da reserva</label> 
                    </div>
                    <div class="form-floating mb-3">
                        <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                        <label for="password" class="form-label">Senha</label> 
                    </div>
                    <label for="name" class="form-label">Os 4 últimos digitos do seu telefone.</label> 
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               Class="ml-auto" 
                               ButtonType="MudBlazor.ButtonType.Submit">
                        Entrar
                    </MudButton> 
                </EditForm>
            </section>
        </MudPaper>
    </MudItem>
    <MudItem xs="12" sm="12" md="7">
        <MudPaper Class="d-flex flex-column align-center justify-center mud-width-full py-8  rounded-xl" Outlined="true">
            <ExternalLoginPicker />
        </MudPaper>
    </MudItem>
</MudGrid>


@code {
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? userName { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private AuthAPI authAPI { get; set; }

    protected override async Task OnInitializedAsync()
    {
        List<Reserva> listaReserva = await cloudbedsAPI.getReservationsAsyncGuestDetails();
        authAPI = new AuthAPI(listaReserva);

    }

    private async Task LoginUser()
    {

        var resposta = await authAPI.LoginAsync(Input.Email, Input.Password);
        if (resposta.Sucesso)
        {
            var teste = (PersistingRevalidatingAuthenticationStateProvider)AuthenticationStateProvider;
            teste.AuthenticateUser(authAPI.GetAuthenticationStateAsync());

            HttpContext.User = resposta.User;
            await HttpContext.SignInAsync(resposta.User);
            // var authResult = await HttpContext.AuthenticateAsync();

            if (ReturnUrl is not null)
                Navigation.NavigateTo(ReturnUrl);
            else
                Navigation.NavigateTo(Navigation.BaseUri);

        }
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Text)]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }

    }



}