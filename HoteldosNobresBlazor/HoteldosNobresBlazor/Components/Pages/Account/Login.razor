@page "/Account/Login"
@attribute [AllowAnonymous]

@using System.ComponentModel.DataAnnotations
@using HoteldosNobresBlazor.Classes
@using HoteldosNobresBlazor.Client.API
@using HoteldosNobresBlazor.Modelo 
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthAPI AuthAPI 
@inject APICloudbeds cloudbedsAPI
@inject NavigationManager Navigation 

 
<PageTitle>Entre no sistema</PageTitle>

<h1>Log in</h1>
<div class="row">
    <div class="col-md-4">
        <section>
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <h2>Use seu CPF ou e-mail</h2>
                <hr />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label for="name" class="form-label">E-mail CPF Reserva</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                    <label for="password" class="form-label">Senha</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                @* <div class="checkbox mb-3">
                    <label class="form-label">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                        Remember me
                    </label>
                </div> *@
                <button type="submit" class="w-100 btn btn-lg btn-primary">Entrar</button>
            </EditForm>
        </section>
    </div>
    <div class="col-md-6 col-md-offset-2">
        <section> 
            <h3>Bem vindo ao Hotel dos Nobres</h3>
            <hr /> 
            <ExternalLoginPicker />
        </section>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }


    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {

        var authenticationState = await authenticationStateTask;

        // if (authenticationState.User.Identity.IsAuthenticated)
        // {
        //     // await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        // } 
    }
     
    private async Task LoginUser()
    {
        // var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        // if (result.Succeeded)
        // {
        //     // Logger.LogInformation("User logged in.");
        //     RedirectManager.RedirectTo(ReturnUrl);
        // } 
        // if (Input.Email != "fabiohcnobre@hotmail.com" && Input.Email != "hoteldosnobres@hotmail.com")
        // {
        //     Reserva novareserva = await cloudbedsAPI.GetReservaAsync(Input.Email);
        //     // novareserva.IDReserva = ReservationId;

        //     // novareserva = FunctionAPICLOUDBEDs.getReservationAsync(novareserva).Result;
        //     // // String log = FuncoesFNRH.Atualizar(novareserva);
        //     // string log = "teste";

        //     // arrayDeLinhas = log.Split('\n');

        //     // DateTime inicio = DateTime.Now;
        //     // novareserva = await cloudbedsAPI.GetReservaAsync(novaReservationId);
        //     // // novareserva = FunctionAPICLOUDBEDs.getReservationAsync(novareserva).Result;
        //     // DateTime final = DateTime.Now;
        //     // TimeSpan diferenca =  final - inicio;
        //     // Console.WriteLine(diferenca);
        // }
     
         
        var resposta = await AuthAPI.LoginAsync(Input.Email, Input.Password);
        if (resposta.Sucesso)
        {
            if (ReturnUrl is not null)
                Navigation.NavigateTo(ReturnUrl);
        }
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Text)]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
         
    }
}