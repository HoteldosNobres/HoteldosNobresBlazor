@page "/reserva/{ReservationId}"
@using System.Globalization
@using HoteldosNobresBlazor.Classes
@using HoteldosNobresBlazor.Client.API
@using HoteldosNobresBlazor.Client.Pages.Component
@using HoteldosNobresBlazor.Components.Pages.Component
@using HoteldosNobresBlazor.Funcoes
@using MosaicoSolutions.ViaCep
@using MosaicoSolutions.ViaCep.Modelos
@using Newtonsoft.Json
@using System.Text.RegularExpressions

@inject NavigationManager navigationManager
@inject APICloudbeds cloudbedsAPI
@inject ISnackbar Snackbar
@inject IJSRuntime JSRuntime
@inject IDialogService DialogService

@rendermode InteractiveAuto

<PageTitle>Reserva</PageTitle>

<MudPaper Class="px-8 pt-2 pb-4 mx-4 my-4 rounded-xl" Justify="Justify.Center">
    @if (guest is not null)
    {
        <MudForm>
            <MudList T="string">
                <MudListItem Icon="@Icons.Material.Filled.Info"> Dados </MudListItem>
                <MudTextField T="string" Label="Nome" @bind-Value="guest.FirstName" TextChanged="TextChangedName" />
                <MudTextField T="string" Label="Sobrenome" @bind-Value="guest.LastName" TextChanged="TextChangedLastName" />
                <MudTextField T="string" Label="E-mail" @bind-Value="guest.Email" TextChanged="TextChangedEmail" />
                <MudTextField T="string" Label="Celular ou Telefone Principal" Disabled="true" @bind-Value="guest.Phone" />  
                <MudSelect T="string" Label="Genero" disabled="@Disabled" @bind-Value="guest.Gender">
                    <MudSelectItem Value="@("N/A")"></MudSelectItem>
                    <MudSelectItem Value="@("M")">Masculino</MudSelectItem>
                    <MudSelectItem Value="@("F")">Feminino</MudSelectItem>
                </MudSelect>
                <MudTextField T="string" Label="CPF" Disabled="@DisabledCPF" @bind-Value="CPF" />
                @*  <MudDatePicker Label="Data de Nascimento" PickerVariant="PickerVariant.Dialog" Format="dd/MM/yyyy"  Editable="@(!Disabled)" Elevation="12" Disabled="@Disabled" @bind-Date="guest.Birthdate" DateFormat="dd/MM/yyyy" /> *@
                <MudDatePicker Label="Data de Nascimento*" Editable="true" Date="guest.Birthdate" ImmediateText="true" Placeholder="dia/mes/ano" DateFormat="dd/MM/yyyy" TextChanged="DatePickerTextChanged" Variant="@Variant.Outlined" Clearable="true" /> 
                <MudText Typo="Typo.subtitle1" Class="deep-purple-text mt-2">Foi informado o CPF @reserva.ProxyCPF e Data de Nascimento @reserva.DataNascimento.ToString("dd/MM/yyyy") </MudText>
                <MudDivider />
                <MudListItem Icon="@Icons.Material.Filled.House"> Endereço </MudListItem>
                <MudTextField T="string" Label="CEP" @bind-Value="guest.Zip" TextChanged="@SearchCEP" Editable="@Disabled"
                Disabled="@Disabled" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Search" AdornmentColor="Color.Primary" />
                <MudTextField T="string" Label="Endereço" Disabled="DisableEndereco" @bind-Value="guest.Address" />
                <MudTextField T="string" Label="Bairro" Disabled="true" @bind-Value="guest.Address2" />
                <MudTextField T="string" Label="Cidade" Disabled="true" @bind-Value="guest.City" />
                <MudTextField T="string" Label="Estado" Disabled="true" @bind-Value="guest.State" />
                <MudTextField T="string" Label="Pais" Disabled="true" @bind-Value="guest.GuestCountry" />
            </MudList>
            <div class="mt-4">
                <MudList T="string">
                    <MudButton Variant="Variant.Filled"
                    Color="Color.Primary"
                    Class="ml-auto rounded-xl"
                    Disabled="@(!Disabled)"
                    @onclick="Editar">
                        Editar
                    </MudButton>
                    <MudButton Variant="Variant.Filled"
                    Color="Color.Primary"
                    Class="ml-auto rounded-xl"
                    Disabled="@DisabledSave"
                    @onclick="Salvar">
                        Salvar
                    </MudButton>
                    <MudButton Variant="Variant.Filled"
                    Color="Color.Primary"
                    Class="ml-auto rounded-xl"
                    Disabled="@(!Disabled)"
                    @onclick="SendCPF">
                        Envia CPF
                    </MudButton>
                    <MudButton Variant="Variant.Filled"
                    Color="Color.Primary"
                    Class="ml-auto rounded-xl"
                    Disabled="@(!Disabled)"
                    @onclick="SendMtur">
                        Envia MTur
                    </MudButton>
                    <MudButton Variant="Variant.Filled"
                    Color="Color.Primary"
                    Class="ml-auto rounded-xl"
                    Disabled="@(!Disabled)"
                    @onclick="SendRecepcao">
                        Envia Recepcao
                    </MudButton>
                    <MudButton Variant="Variant.Filled"
                    Color="Color.Primary"
                    Class="ml-auto rounded-xl"
                    Disabled="@(!Disabled)"
                    @onclick="SendInf">
                        Envia Inf
                    </MudButton>
                    <MudButton Variant="Variant.Filled"
                    Color="Color.Primary"
                    Class="ml-auto rounded-xl"
                    Disabled="@(!Disabled)"
                    @onclick="SendCloubeds">
                        Cloudbeds
                    </MudButton>
                    <MudButton Variant="Variant.Filled"
                    Color="Color.Primary"
                    Class="ml-auto rounded-xl"
                    Disabled="@(!Disabled)"
                    @onclick="SendOrigem">
                        Origem
                    </MudButton>
                    <MudButton Variant="Variant.Filled"
                    Color="Color.Primary"
                    Class="ml-auto rounded-xl"
                    Disabled="@(!Disabled)"
                    @onclick="SendEmail">
                        Envia Email
                    </MudButton>
                    <MudButton Variant="Variant.Filled"
                               Color="Color.Primary"
                               Class="ml-auto rounded-xl"
                               Disabled="@(!Disabled)"
                               @onclick="ZeraHora">
                       Zera Hora
                    </MudButton>
                </MudList>
            </div>
        </MudForm>
    }
    else
    {
        <MudGrid Justify="Justify.Center" Class="align-items-center">
            <MudItem>
                <MudProgressCircular Indeterminate="true"></MudProgressCircular>
            </MudItem>
        </MudGrid>
    }
</MudPaper>


@if (reserva is null)
{
    <MudPaper Class="px-8 pt-2 mx-4 my-4 rounded-xl" Align="Align.Center" Justify="Justify.Center">
        <MudGrid Justify="Justify.Center" Class="align-items-center">
            <MudItem>
                <MudProgressCircular Indeterminate="true"></MudProgressCircular>
            </MudItem>
        </MudGrid>
    </MudPaper>
}
else
{
    <MudContainer Class="px-8 pt-2 mx-4 my-4" MaxWidth="MaxWidth.False">
        <MudGrid>
            <MudItem xs="12" sm="6">
                <MudPaper Elevation="2" Class="pa-4  rounded-xl" Style="height: 100%">
                    @if (reserva is not null && reserva.Status is not null && reserva.Status.ToUpper().Equals("CANCELED"))
                    {
                        <MudGrid Justify="Justify.Center" Class="align-items-center">
                            <MudItem>
                                <MudText Typo="Typo.h3" Align="Align.Center" Color="Color.Error"> <i class="fa-solid fa-xmark" aria-hidden="true"></i> </MudText>
                            </MudItem>
                        </MudGrid>
                        <MudText Typo="Typo.h6" Align="Align.Center" GutterBottom="true">Seu pedido foi cancelado!</MudText>
                    }
                    else
                    {
                        <MudGrid Justify="Justify.Center" Class="align-items-center">
                            <MudItem>
                                <MudText Typo="Typo.h3" Align="Align.Center" Color="Color.Success"> <i class="fa fa-check" aria-hidden="true"></i> </MudText>
                            </MudItem>
                        </MudGrid>
                        <MudText Typo="Typo.h6" Align="Align.Center" GutterBottom="true">Agradecemos seu pedido!</MudText>
                    } 
                    <MudText Align="Align.Center"> O número da reserva é #@reserva.IDReserva  </MudText>
                    <MudText Align="Align.Center"> Enviamos a confirmação do pedido para o e-mail: @reserva.Email  </MudText>
                    <MudGrid Justify="Justify.Center">
                        <MudItem xs="3">
                            <MudGrid Class="align-items-center">
                                <MudItem>
                                    <MudText Align="Align.Center"> Check-in </MudText>
                                    <MudText Typo="Typo.h6" Align="Align.Center" Color="Color.Success">  @reserva.DataCheckIn.GetValueOrDefault().ToString("dd/MM/yyyy")</MudText>
                                    <MudText Align="Align.Center">@reserva.DataCheckIn.GetValueOrDefault().ToString("dddd", new CultureInfo("pt-BR"))</MudText>
                                </MudItem>
                            </MudGrid>
                        </MudItem>
                        <MudItem xs="1">
                            <MudGrid Justify="Justify.Center" Class="d-flex flex-1 align-items-center">
                                <MudItem>
                                    <i class="fa fa-arrow-right" aria-hidden="true"></i>
                                </MudItem>
                            </MudGrid>
                        </MudItem>
                        <MudItem xs="3">
                            <MudGrid Class="align-items-center">
                                <MudItem>
                                    <MudText Align="Align.Center">Check-Out </MudText>
                                    <MudText Typo="Typo.h6" Align="Align.Center" Color="Color.Success"> @reserva.DataCheckOut.GetValueOrDefault().ToString("dd/MM/yyyy") </MudText>
                                    <MudText Align="Align.Center">@reserva.DataCheckOut.GetValueOrDefault().ToString("dddd", new CultureInfo("pt-BR")) </MudText>
                                </MudItem>
                            </MudGrid>
                        </MudItem>
                    </MudGrid>
                    <MudText Align="Align.Center">
                        <MudChip T="string" Color="Color.Tertiary">
                            <i class="fa-solid fa-moon"> </i> @reserva.Noites.GetValueOrDefault(1).ToString() Noite(s)
                            <i class="fa fa-users" aria-hidden="true"></i> @reserva.Hospedes.GetValueOrDefault(1).ToString() Hospede(s)
                        </MudChip>
                    </MudText>
                    <MudSpacer />
                    <MudText Align="Align.Center" Class="mb-n4"> - </MudText>
                    <MudText Align="Align.Center"> Nome do Hospede Principal: @reserva.NomeHospede  </MudText>
                    <MudText Align="Align.Center"> Origem: @reserva.Origem  </MudText>
                    @if (!string.IsNullOrEmpty(reserva.IDReservaAgencia))
                    {
                        <MudText Align="Align.Center"> Número da reserva via agência: @reserva.IDReservaAgencia  </MudText>
                    }
                    <MudItem Align="Align.Center">
                        <MudTextField T="string" Label="Horário previsto de chegada" HelperText="Horário tem que ser entre 14:00 e 23:00 (Brasilia)"
                        @bind-Value="HorarioAproximado" InputType="InputType.Time" TextChanged="OnValueChangeHandler" />
                    </MudItem>
                    <MudSpacer />
                    <br />

                    @if (reserva is not null && reserva.Notas is not null && reserva.Notas.Count > 0)
                    {
                        <CardNotas Reserva=reserva />
                    }
                    <br />
                    @if (reserva is not null && reserva.ListaQuartos is not null && reserva.ListaQuartos.Count > 0)
                    {
                        <CardAcomodacoes Reserva=reserva />
                    }
                    <br />
                    <CardPix Reserva=reserva />
                </MudPaper>
            </MudItem>
            <MudItem xs="12" sm="4">
                <MudGrid>
                    <MudItem xs="12">
                        <MudPaper Elevation="2" Class="align-items-center rounded-xl">
                            <MudListItem T="string" class="rounded-t-xl">
                                <MudText Typo="Typo.h6" Align="Align.Center"><b>Cobrança</b></MudText>
                            </MudListItem>
                            <MudDivider />
                            <MudContainer>
                                <MudList T="string" ReadOnly="true" Dense="true">
                                    <MudListItem T="string">
                                        <div class="d-flex">
                                            <MudText Typo="Typo.caption">Acomodações</MudText>
                                            <MudText Typo="Typo.caption" GutterBottom="true" Class="ml-auto">R$ @reserva.BalanceDetailed!.SubTotal.ToString("N2", new CultureInfo("pt-BR"))</MudText>
                                        </div>
                                    </MudListItem>
                                    <MudListItem T="string">
                                        <div class="d-flex">
                                            <MudText Typo="Typo.caption">Itens adicionais e extras</MudText>
                                            <MudText Typo="Typo.caption" GutterBottom="true" Class="ml-auto">R$ @reserva.BalanceDetailed!.AdditionalItems.ToString("N2", new CultureInfo("pt-BR"))</MudText>
                                        </div>
                                    </MudListItem>
                                    <MudListItem T="string">
                                        <div class="d-flex">
                                            <MudText Typo="Typo.caption">Imposto e taxas</MudText>
                                            <MudText Typo="Typo.caption" GutterBottom="true" Class="ml-auto">R$ @reserva.BalanceDetailed!.TaxesFees.ToString("N2", new CultureInfo("pt-BR"))</MudText>
                                        </div>
                                    </MudListItem>
                                    <MudDivider />
                                    <MudListItem T="string">
                                        <div class="d-flex">
                                            <MudText Typo="Typo.caption" GutterBottom="true"><b>Total</b></MudText>
                                            <MudText Typo="Typo.caption" GutterBottom="true" Class="ml-auto"><b>R$ @reserva.BalanceDetailed!.GrandTotal.ToString("N2", new CultureInfo("pt-BR"))</b></MudText>
                                        </div>
                                    </MudListItem>
                                    <MudListItem T="string">
                                        <div class="d-flex">
                                            <MudText Typo="Typo.caption" GutterBottom="true"><b>Valor pago</b></MudText>
                                            <MudText Typo="Typo.caption" GutterBottom="true" Class="ml-auto"><b>R$ @reserva.BalanceDetailed!.Paid.ToString("N2", new CultureInfo("pt-BR"))</b></MudText>
                                        </div>
                                    </MudListItem>
                                </MudList>
                                <div class="mt-auto">
                                    <MudDivider />
                                    <div class="d-flex pa-4">
                                        <MudText><b>Saldo a pagar</b></MudText>
                                        <MudText Class="ml-auto"><b>R$ @((reserva.BalanceDetailed!.GrandTotal - reserva.BalanceDetailed!.Paid).ToString("N2", new CultureInfo("pt-BR")))</b></MudText>
                                    </div>
                                </div>
                            </MudContainer>
                        </MudPaper>
                    </MudItem>
                </MudGrid>
            </MudItem>
        </MudGrid>
    </MudContainer>
}


@code {
    [Parameter]
    public string ReservationId { get; set; }

    public Guest guest { get; set; }
    private UserInfo user = default!;
    public string CPF { get; set; }
    public string HorarioAproximado { get; set; }

    public Reserva reserva { get; set; }

    bool ReadOnly = true;
    bool NestedReadOnly;
    bool Disabled = true;
    bool NestedDisabled;
    bool DisabledSave = true;
    bool DisabledCPF = true;
    bool DisableEndereco = true;

    protected override async Task OnInitializedAsync()
    {
        reserva = await cloudbedsAPI.GetReservaAsync(ReservationId);

        if (reserva is not null && reserva.HorarioAproximado is not null)
        {
            HorarioAproximado = reserva.HorarioAproximado.GetValueOrDefault().ToString("HH:mm");
        }

        guest = await cloudbedsAPI.GetGuestAsync(reserva.GuestID);
        if (guest is not null)
        {
            DisabledCPF = false;
            foreach (var item in guest.CustomFields)
            {
                if (item.CustomFieldName.Equals("CPF"))
                {
                    string cpfstring = Regex.Replace(item.CustomFieldValue, @"[^\d]", ""); 
                    CPF =   reserva.ProxyCPF;   
                }
                if (item.CustomFieldName.Equals("Data de Nascimento"))
                {
                    string datadenascimento = item.CustomFieldValue;
                    if (!string.IsNullOrEmpty(datadenascimento) && datadenascimento.Length > 4)
                    {
                        try
                        {
                            guest.Birthdate = DateTime.Parse(datadenascimento, new CultureInfo("pt-BR"));
                            guest.GuestBirthdate = DateTime.Parse(datadenascimento, new CultureInfo("pt-BR"));
                        }
                        catch (Exception ex)
                        {
                            guest.Birthdate = null;
                        }
                    }
                } 
            }
        }
    }

    protected async Task Editar()
    {
        Disabled = !Disabled;
        ReadOnly = !ReadOnly;
        DisabledSave = !DisabledSave;

    }

    protected async Task Salvar()
    {
        try
        {
            List<string> listaparametros = new List<string>();

            if (guest.Birthdate is not null)
            {
                if (!string.IsNullOrEmpty(guest.Birthdate.Value.ToString("yyyy-MM-dd")))
                    cloudbedsAPI.PutGuestAsync(guest.GuestId.ToString(), "guestBirthDate", guest.Birthdate.Value.ToString("yyyy-MM-dd"));
                CustomField? customField = new CustomField();
                customField!.CustomFieldName = "Data_de_Nascimento";
                customField!.CustomFieldValue = guest.Birthdate.Value.ToString("dd/MM/yyyy");
                var text = JsonConvert.SerializeObject(customField);

                listaparametros.Add("guestBirthdate");
                listaparametros.Add("'" + guest.Birthdate.Value.ToString("yyyy-MM-dd") + "'");

                cloudbedsAPI.PutGuestAsync(guest.GuestId.ToString(), "guestCustomFields", "[" + text.ToString() + "]");

            }

            if (!string.IsNullOrEmpty(guest.GuestGender))
            {
                listaparametros.Add("guestGender");
                listaparametros.Add(guest.GuestGender);
            }

            if (!string.IsNullOrEmpty(guest.GuestZip))
            {
                listaparametros.Add("guestZip");
                listaparametros.Add(guest.GuestZip);
            }


            if (!string.IsNullOrEmpty(guest.GuestAddress))
            {
                listaparametros.Add("guestAddress");
                listaparametros.Add(guest.GuestAddress);
            }

            if (!string.IsNullOrEmpty(guest.GuestAddress2))
            {
                listaparametros.Add("guestAddress2");
                listaparametros.Add(guest.GuestAddress2!);
            }


            if (!string.IsNullOrEmpty(guest.GuestCity))
            {
                listaparametros.Add("guestCity");
                listaparametros.Add(guest.GuestCity!);
            }

            if (!string.IsNullOrEmpty(guest.GuestState))
            {
                listaparametros.Add("guestState");
                listaparametros.Add(guest.GuestState!);
            }

            if (!DisabledCPF && !string.IsNullOrEmpty(CPF))
            {
                reserva.Cpf = CPF;
                CustomField? customField = guest.CustomFields.Where(x => x.CustomFieldName.Equals("CPF")).FirstOrDefault();
                if (customField is null)
                    customField = new CustomField();
                customField!.CustomFieldName = "CPF";
                customField!.CustomFieldValue = reserva.ProxyCPF;
                var text = JsonConvert.SerializeObject(customField);
                cloudbedsAPI.PutGuestDNIAsync(reserva.GuestID!, reserva.ProxyCPF);

                listaparametros.Add("guestCustomFields");
                listaparametros.Add("[" + text.ToString() + "]");

                listaparametros.Add("guestTaxId");
                listaparametros.Add(@"""" + reserva.ProxyCPF + @"""");
            }

            if (listaparametros.Count > 2)
                cloudbedsAPI.PutGuestMaisAsync(guest.GuestId.ToString(), listaparametros);

            Snackbar.Add("Cadastrado alterado com sucesso!", Severity.Success);

            Disabled = !Disabled;
            ReadOnly = !ReadOnly;
            DisabledSave = !DisabledSave;
            DisabledCPF = true;

            if (!DisableEndereco)
                DisableEndereco = true;
        }
        catch (Exception ex)
        {
            Snackbar.Add("Erro ao alterar o cadastro!", Severity.Error);
        }
    }

    private void SearchCEP(string value)
    {
        if (value.Length >= 8)
        {
            Cep cep = value;
            var viaCepService = ViaCepService.Default();
            var endereco = viaCepService.ObterEndereco(cep);
            string Cidade = endereco.Localidade;
            guest.City = Cidade;
            if (string.IsNullOrEmpty(guest.Address))
                guest.Address = endereco.Logradouro;
            guest.State = endereco.UF;
            guest.Country = "BRASIL";
            guest.Address2 = endereco.Bairro;
            guest.Zip = endereco.Cep;

            if (!Disabled && DisableEndereco)
                DisableEndereco = false;

        }
        else
        {
        }

    }

    protected async Task SendCPF()
    {
        try
        {
            var retorno = await FunctionWhatsApp.postMensagemTempleteDadosFaltando(reserva.ProxyCelular!, reserva.IDReserva!, reserva.NomeHospede!, reserva.LinkPublico!);
            FuncoesEmail.EnviarEmailCPF(reserva.Email, reserva.IDReserva, reserva.NomeHospede);
            Snackbar.Add("Encaminhado com sucesso", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add("Erro ao enviar CPF", Severity.Error);
            Console.WriteLine(ex.Message);
        }
    }

    protected async Task SendMtur()
    {
        try
        {
            var retorno = await FunctionWhatsApp.postMensagemTemplete(reserva.ProxyCelular!, "inf_mtur");
            Snackbar.Add("Encaminhado com sucesso", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add("Erro ao enviar CPF", Severity.Error);
            Console.WriteLine(ex.Message);
        }
    }

    protected async Task SendInf()
    {
        try
        {
            var retorno = await FunctionWhatsApp.postMensagemTempleteInicial(reserva.ProxyCelular!, reserva.IDReserva!, reserva.NomeHospede!);
            Snackbar.Add("Encaminhado com sucesso", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add("Erro ao enviar CPF", Severity.Error);
            Console.WriteLine(ex.Message);
        }
    }

    protected async Task SendRecepcao()
    {
        try
        {
            DialogOptions closeOnEscapeKey = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseOnEscapeKey = true };

            var result = await DialogService.Show<DialogMensager>("Mensagem", closeOnEscapeKey).Result;

            if (!result.Canceled)
            {
                string mensagem = result.Data.ToString();
                var retorno = await FunctionWhatsApp.postMensagem(reserva.ProxyCelular!, mensagem);
                Snackbar.Add("Encaminhado com sucesso", Severity.Success);

                if (!string.IsNullOrEmpty(reserva.Email))
                    FuncoesEmail.EnviarEmail(reserva.Email, mensagem, " - ");
            }


            //

        }
        catch (Exception ex)
        {
            Snackbar.Add("Erro ao enviar CPF", Severity.Error);
            Console.WriteLine(ex.Message);
        }
    }

    protected async Task SendEmail()
    {
        try
        {
            DialogOptions closeOnEscapeKey = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseOnEscapeKey = true };

            var result = await DialogService.Show<DialogMensager>("Mensagem", closeOnEscapeKey).Result;

            if (!result.Canceled)
            {
                var parametro = (object[])result.Data;
                string mensagem = parametro[0].ToString();
                bool email = (bool)parametro[1];
                bool whatsapp = (bool)parametro[2];

                if (email)
                {
                    FuncoesEmail.EnviarEmail(reserva.Email, mensagem, "Mensagem do Hotel dos Nobres");
                    Snackbar.Add("E-mail Encaminhado com sucesso", Severity.Success);
                }
                
                if (whatsapp)
                {
                    var retorno = await FunctionWhatsApp.postMensagem(reserva.ProxyWhatsapp, mensagem);
                    Snackbar.Add("Whatsapp - Encaminhado com sucesso", Severity.Success);
                } 
            }


            //

        }
        catch (Exception ex)
        {
            Snackbar.Add("Erro ao enviar", Severity.Error);
            Console.WriteLine(ex.Message);
        }
    }

    protected async Task SendCloubeds()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("open", reserva.LinkReserva, "_blank");
        }
        catch (Exception ex)
        {
            Snackbar.Add("Erro ao enviar CPF", Severity.Error);
            Console.WriteLine(ex.Message);
        }
    }

    protected async Task SendOrigem()
    {
        try
        {
            await JSRuntime.InvokeVoidAsync("open", reserva.LinkReservaOrigem, "_blank");
        }
        catch (Exception ex)
        {
            Snackbar.Add("Erro ao enviar CPF", Severity.Error);
            Console.WriteLine(ex.Message);
        }
    }

    protected async Task ZeraHora()
    {
        try
        {
            cloudbedsAPI.PutReservaAsync(reserva.IDReserva.ToString(), "estimatedArrivalTime", "null");
            FuncoesEmail.EnviarEmailSuporte(reserva.IDReserva, reserva.NomeHospede, 4);
            Snackbar.Add("Sucesso Zera Hora", Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add("Erro ao Zera Hora", Severity.Error);
            Console.WriteLine(ex.Message);
        }
    }


    protected async Task OnValueChangeHandler(string newValue)
    {
        try
        {
            DateTime horario = DateTime.Parse(newValue);
            if (horario.Hour >= 14 && horario.Hour <= 23)
            {
                cloudbedsAPI.PutReservaAsync(reserva.IDReserva.ToString(), "estimatedArrivalTime", horario.ToString("HH:mm"));
                FuncoesEmail.EnviarEmailSuporte(reserva.IDReserva, reserva.NomeHospede, 4);
            }
            else
            {
                Snackbar.Add("O horário previsão de chegada está fora 14 horas e 23 horas.", Severity.Warning);
            }

        }
        catch (Exception ex)
        {
            Snackbar.Add("Erro autualizar horario", Severity.Error);
            Console.WriteLine(ex.Message);
        }
    }

    protected async Task TextChangedName(string newValue)
    {
        try
        { 
            if (!string.IsNullOrEmpty(newValue))
            {
                cloudbedsAPI.PutGuestAsync(guest.GuestId.ToString(), "guestName", newValue);
            }
            else
            {
                Snackbar.Add("Nome nao pode ser vazio.", Severity.Warning);
            }

        }
        catch (Exception ex)
        {
            Snackbar.Add("Erro atualizar o nome.", Severity.Error);
            Console.WriteLine(ex.Message);
        }
    }

    protected async Task TextChangedLastName(string newValue)
    {
        try
        {
            if (!string.IsNullOrEmpty(newValue))
            {
                cloudbedsAPI.PutGuestAsync(guest.GuestId.ToString(), "guestLastName", newValue);
            }
            else
            {
                Snackbar.Add("Nome nao pode ser vazio.", Severity.Warning);
            }

        }
        catch (Exception ex)
        {
            Snackbar.Add("Erro atualizar o nome.", Severity.Error);
            Console.WriteLine(ex.Message);
        }
    }

    protected async Task TextChangedEmail(string newValue)
    {
        try
        {
            if (!string.IsNullOrEmpty(newValue))
            {
                cloudbedsAPI.PutGuestAsync(guest.GuestId.ToString(), "guestEmail", newValue);
            }
            else
            {
                Snackbar.Add("E-mail nao pode ser vazio.", Severity.Warning);
            }

        }
        catch (Exception ex)
        {
            Snackbar.Add("Erro atualizar o e-mail.", Severity.Error);
            Console.WriteLine(ex.Message);
        }
    }

    private void DatePickerTextChanged(string newValue)
    {
        if (!string.IsNullOrEmpty(newValue))
        {
            newValue = new string(newValue.Where(char.IsDigit).ToArray());
            if (!string.IsNullOrEmpty(newValue) && (newValue.Length == 6 || newValue.Length == 8))
            {
                string[] formats = { "ddMMyy", "ddMMyyyy", "dd/MM/yyyy", "dd/M/yyyy", "d/MM/yyyy", "d/M/yyyy", "dd/MM/yy", "dd/M/yy", "d/MM/yy", "d/M/yy" };
                if (DateTime.TryParseExact(newValue, formats, CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime validDate))
                {
                    guest.Birthdate = validDate;
                }
            }

        }

    }

} 