@page "/minhareserva"
@using System.Security.Claims
@using System.Net.NetworkInformation
@using HoteldosNobresBlazor.Client.Pages.Component
@inject APICloudbeds cloudbedsAPI
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject AppState appState

@rendermode InteractiveServer

<PageTitle>Reserva</PageTitle>

<MudPaper Class="px-8 pt-2 pb-4 mx-12 my-8 rounded-xl" Justify="Justify.Center">
    <MudStack Row="true" Justify="Justify.SpaceBetween">
        <MudText Typo="Typo.h4"> Reservas</MudText>
        <MudPagination Count="@totalPaginas" SelectedChanged="PaginaMudou"></MudPagination>
    </MudStack>

    @if (listaPagina is not null)
    {
        <MudGrid>
            @foreach (var reser in listaPagina)
            {
                <MudItem Style="rounded-xl">
                    <CardReserva Reserva=reser />
                </MudItem>
            }
        </MudGrid>
    }
    else
    {
        <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
    }

</MudPaper>

@code {
    private int tamanho = 8;
    private int totalItens;
    private int totalPaginas;

    private UserInfo user = default!;
    private List<Reserva>? listaCompleta = Enumerable.Empty<Reserva>().ToList();
    private List<Reserva>? listaPagina;

    protected override async Task OnInitializedAsync()
    {
        var authorization = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (!authorization.User.Identity!.IsAuthenticated)
            return;

        user = new UserInfo(authorization.User);
        string clientId = user.UserId;

        if (appState.ListReservas.Count() > 0)
            listaCompleta = appState.ListReservas;
        else
            listaCompleta = await cloudbedsAPI.getReservationsAsyncGuestDetails();

        listaCompleta = listaCompleta.Where(a => (a.Email != null && a.Email.Equals(user.Email))
            || (a.GuestID != null && a.GuestID.Equals(user.UserId))
             ).ToList();


        if (listaCompleta is not null)
        {
            listaCompleta = listaCompleta.OrderByDescending(a => a.NomeHospede).ToList();
            totalItens = listaCompleta.Count();
            totalPaginas = Convert.ToInt32(Math.Ceiling((totalItens * 1.0) / tamanho));
            this.PaginaMudou(1);
        }

    }

    private void PaginaMudou(int pageNumber)
    {
        var indice = pageNumber - 1;
        listaPagina = listaCompleta!
            .Skip(tamanho * indice)
            .Take(tamanho)
            .ToList();
    }



}
