@using System.Globalization
@inject APICloudbeds cloudbedsAPI
@inject ISnackbar Snackbar

<MudGrid Justify="Justify.Center" Class="align-items-center">
    <MudItem>
        <MudText Typo="Typo.h3" Align="Align.Center" Color="Color.Success"> <i class="fa fa-check" aria-hidden="true"></i> </MudText>
    </MudItem>
</MudGrid>
<MudText Typo="Typo.h6" Align="Align.Center" GutterBottom="true">Agradecemos seu pedido!</MudText>
<MudText Align="Align.Center"> O número da reserva é #@reserva.IDReserva  </MudText>
@if (!string.IsNullOrEmpty(reserva.Email) && !reserva.Email.Contains("booking.com"))
{
    <MudText Align="Align.Center"> Enviamos a confirmação do pedido para o e-mail: @reserva.Email  </MudText>
}
<MudSpacer />
<MudItem >
    <MudGrid Spacing="1" Justify="Justify.Center">
        <MudItem xs="4" sm="4" md="4">
            <MudGrid Class="align-end" Color="Color.Success" Justify="Justify.FlexEnd">
                <MudItem>
                    <MudText Align="Align.Center"> Check-in </MudText>
                    <MudText Typo="Typo.h6" Align="Align.Center" Color="Color.Success">  @reserva.DataCheckIn.GetValueOrDefault().ToString("dd/MM/yyyy")</MudText>
                    <MudText Align="Align.Center">@reserva.DataCheckIn.GetValueOrDefault().ToString("dddd", new CultureInfo("pt-BR"))</MudText>
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem xs="1" sm="1" md="1">
            <MudGrid Justify="Justify.Center">
                <MudItem Class="align-center"> 
                    <MudText Typo="Typo.h6" Class="py-2 d-flex flex-1" Align="Align.Center"><i class="fa fa-arrow-right" aria-hidden="true"></i></MudText>
                </MudItem>
            </MudGrid>
        </MudItem>
        <MudItem xs="4" sm="4" md="4">
            <MudGrid Class="align-items-center">
                <MudItem>
                    <MudText Align="Align.Center">Check-Out </MudText>
                    <MudText Typo="Typo.h6" Align="Align.Center" Color="Color.Success"> @reserva.DataCheckOut.GetValueOrDefault().ToString("dd/MM/yyyy") </MudText>
                    <MudText Align="Align.Center">@reserva.DataCheckOut.GetValueOrDefault().ToString("dddd", new CultureInfo("pt-BR")) </MudText>
                </MudItem>
            </MudGrid>
        </MudItem>
    </MudGrid>
 </MudItem> 
<MudText Align="Align.Center">
    <MudChip T="string" Color="Color.Tertiary">
        <i class="fa-solid fa-moon"> </i> @reserva.Noites.GetValueOrDefault(1).ToString() Noite(s)
        <i class="fa fa-users" aria-hidden="true"></i> @reserva.Hospedes.GetValueOrDefault(1).ToString() Hospede(s)
    </MudChip>
</MudText> 
<MudSpacer />
<MudText Align="Align.Center"> Nome do Hospede Principal: @reserva.NomeHospede  </MudText>
<MudText Align="Align.Center"> Origem: @reserva.Origem  </MudText>

<MudItem Align="Align.Center">
    <MudTextField T="string" Label="Horário previsto de chegada" HelperText="Horário tem que ser entre 14:00 e 23:00 (Brasilia)"
                  @bind-Value="HorarioAproximado" InputType="InputType.Time" TextChanged="HorarioOnValueChangeHandler" />
</MudItem>

@if (!string.IsNullOrEmpty(reserva.IDReservaAgencia))
{
    <MudText Align="Align.Center"> Número da reserva via agência: @reserva.IDReservaAgencia  </MudText>
}
@if (!string.IsNullOrEmpty(reserva.SnNum))
{
        <MudText Align="Align.Center"> Número da reserva Ministério do Turismo(Mtur): @reserva.SnNum  </MudText>
}
<MudSpacer />
<br />
@* <MudItem Align="Align.Center">
    <MudTextField T="string" Label="Horário previsto de chegada" HelperText="Horário tem que ser entre 14:00 e 23:00 (Brasilia)" InputType="InputType.Time" TextChanged="OnValueChangeHandler" />
</MudItem>
<br /> *@
@if (reserva is not null && reserva.ListaQuartos is not null && reserva.ListaQuartos.Count > 0)
{
    <CardAcomodacoes Reserva=reserva />
}
<br /> 
@if (reserva is not null && reserva.Origem is not null 
   && (reserva.Origem.Contains("Website/Booking Engine") || reserva.Origem.Contains("Booking.com")))
{
    <CardPix Reserva=reserva />
}
<br />


@code {
    [Parameter]
    public Reserva? reserva { get; set; }

    public string? Imagem { get; set; }
    public string HorarioAproximado { get; set; }

    protected override async Task OnInitializedAsync()
    {
        // Imagem = Reserva!.FotoPerfil!.Contains("Foto") ? $"https://localhost:7089/{Artista!.FotoPerfil}" : "images/cardArtista.png";
        reserva = await cloudbedsAPI.GetReservaAsync(reserva.IDReserva!);

        if (reserva is not null && reserva.HorarioAproximado is not null)
        {
            HorarioAproximado = reserva.HorarioAproximado.GetValueOrDefault().ToString("HH:mm");
        }

    }

    private string LimitaCaracteres(string texto, int tamanhoMaximo)
    {
        tamanhoMaximo -= 3;
        return (texto.Length >= tamanhoMaximo) ? $"{texto.Substring(0, tamanhoMaximo)}..." : texto;
    }

    private async Task HorarioOnValueChangeHandler(string newValue)
    {
        try
        {
            DateTime horario = DateTime.Parse(newValue);
            if (horario.Hour >= 14 && horario.Hour <= 23)
            {
                cloudbedsAPI.PutReservaAsync(reserva.IDReserva.ToString(), "estimatedArrivalTime", horario.ToString("HH:mm"));
            }
            else
            {
                Snackbar.Add("O horário previsão de chegada está fora 14 horas e 23 horas.", Severity.Warning);
            }

        }
        catch (Exception ex)
        {
            Snackbar.Add("Erro autualizar horario", Severity.Error);
            Console.WriteLine(ex.Message);
        }
    }
}
