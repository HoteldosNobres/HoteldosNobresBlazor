@using System.Globalization
@using HoteldosNobresBlazor.Funcoes
@using QRCoder
@using pix_payload_generator.net.Models.CobrancaModels
@using pix_payload_generator.net.Models.PayloadModels
@inject APICloudbeds cloudbedsAPI

<br />
@if (visible)
{
    <MudPaper Class="rounded-xl">
        <MudList T="string" ReadOnly="true" class="rounded-t-xl">
            <MudListItem T="string" style="background-color: #F5F4F4;" class="rounded-t-xl">
                <MudStack Row="true">
                    <MudText><b>Instruções para a transferência bancária - PIX</b></MudText>
                    <MudSpacer />
                    <MudIcon Icon="fa-solid fa-building-columns" Title="Favorite" />
                </MudStack>
            </MudListItem>
            <MudDivider />
            <MudListItem T="string" ReadOnly="true">
                @if (Reserva is not null && Reserva.Origem is not null && Reserva.Origem.Contains("Website/Booking Engine"))
                {
                    <MudText Typo="Typo.caption">NÃO E POSSÍVEL PAGAR NO CHECK-IN !!!</MudText>
                    <br />
                    <br />
                    <MudText Typo="Typo.caption" GutterBottom="true" Class="ml-auto">
                        Reservas não paga no período de  30 minutos sera cancelada, como em nossos Termos e Politicas.<br />
                    </MudText>
                }
                <MudText Typo="Typo.caption" GutterBottom="true" Class="ml-auto">
                    Nome <b>HOTEL DOS NOBRES LTDA</b><br />
                    Banco <b>SICOOB </b><br />
                    @if (valordecimal > 0)
                    {
                        <MudText Typo="Typo.caption">Valor<b> R$ @Valor </b><br /> </MudText>
                    }
                    @if (Reserva is not null && Reserva.IDReserva != "nova")
                    {
                        <MudText Typo="Typo.caption">Identificador/Reserva <b> @Reserva.IDReserva </b><br /> </MudText>
                    }
                </MudText>
                <br />
                <MudGrid>
                    <MudItem xs="12">
                        <MudGrid Justify="Justify.SpaceBetween">
                            <MudItem xs="12" sm="6">
                                <MudImage Fluid="true" Align="Align.Center" src="@($"data:image/png;base64,{qrCode}")" Alt="QRCode" Elevation="25" Width="250" Height="250" Class="rounded-lg" />
                            </MudItem>
                            <MudItem xs="12" sm="6">
                                <MudTextField T="string" Label="Copia e Cola" Variant="Variant.Text" Text="@stringToQrCode" AutoGrow HelperText="Use no APP pagar PIX Copia e Cola" />
                            </MudItem>
                            <MudButton Variant="Variant.Filled"
                            Color="Color.Primary"
                            Class="ml-auto rounded-xl"
                            @onclick="Whatsapp">
                                Enviar para Whatsapp
                            </MudButton>
                        </MudGrid>
                    </MudItem>
                </MudGrid>
            </MudListItem>
        </MudList>
    </MudPaper>
    <br />
}




@code {
    [Parameter]
    public Reserva? Reserva { get; set; }

    public bool visible { get; set; } = true;

    public string? Imagem { get; set; }
    public string Valor { get; set; }
    public decimal valordecimal { get; set; }
    public string qrCode { get; set; }
    public string stringToQrCode { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Reserva = await cloudbedsAPI.GetReservaAsync(Reserva.IDReserva);
        if (Reserva is not null && Reserva.BalanceDetailed is not null)
        {
            valordecimal = Reserva!.BalanceDetailed!.GrandTotal - Reserva!.BalanceDetailed!.Paid;
            Valor = valordecimal.ToString("N2", new CultureInfo("pt-BR"));
            if (valordecimal == 0)
                visible = false;
        }

        GerarQrcode();
    }

    public void GerarQrcode()
    { 
        stringToQrCode = FunctionSicoob.QrCode(Reserva!, Reserva.Valor!).Result;

        qrCode = GenerateQRCode(stringToQrCode);
    }

    public string GenerateQRCode(string data)
    {
        QRCodeGenerator qrGenerator = new QRCodeGenerator();
        QRCodeData qrCodeData = qrGenerator.CreateQrCode(data, QRCodeGenerator.ECCLevel.M);
        PngByteQRCode qrCode = new PngByteQRCode(qrCodeData);
        byte[] qrCodeImage = qrCode.GetGraphic(20);
        string qrCodeAsBase64 = Convert.ToBase64String(qrCodeImage);
        return qrCodeAsBase64;
    }

    private string LimitaCaracteres(string texto, int tamanhoMaximo)
    {
        tamanhoMaximo -= 3;
        return (texto.Length >= tamanhoMaximo) ? $"{texto.Substring(0, tamanhoMaximo)}..." : texto;
    }

    protected async Task Whatsapp()
    {
       FunctionWhatsApp.postMensagemTempletePIX(Reserva.ProxyCelular!, Reserva.IDReserva!, stringToQrCode!);
    }
}
